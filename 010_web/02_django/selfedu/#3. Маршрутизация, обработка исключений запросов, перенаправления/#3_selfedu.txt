#3. Маршрутизация, обработка исключений запросов, перенаправления
https://proproprogs.ru/django/model-mtv-marshrutizaciya-funkcii-predstavleniya
https://proproprogs.ru/django/marshrutizaciya-obrabotka-isklyucheniy-zaprosov-perenapravleniya

параметры в строке запроса
urls_wom.py
path('cats/<int:catid>/', categories),  # # http://127.0.0.1/cats/1/

/<type:name_var>/
типы параметров
str - любая не пустая строка, кроме '/'
int - любое положительное число
slug - слаг, латинские символы, дефис и подчеркивание
uuid - цифры и малые латинские символы, дефис
path - любая не пустая строка и '\'  


views.py

def categories(request, catid):
	return HttpResponse(f"<h1> Статьи по категориям </h1> <p>{catid}</p>")

путь с учетом регулярных выражений 
re_path()

urls_wom.py
from django.urls import re_path  # импорт re_path

re_path(r'^archive/(?P<year>[0-9]{4})/', archive),  # определение запроса

представление
views.py

def archive(request, year):
    if int(year) > 2020:
        return redirect('home', permanent=False)

    return HttpResponse(f"<h1>Архив по годам</h1><p>{year}</p>")


обработка запросов GET POST

GET запрос
?ключ=значение&ключ=значение&...&ключ=значение
http://127.0.0.1:80/.../?name=Gagarina&cat=music
& амперсанд

def categories(request, catid):
    if request.GET:
        print(request.GET)

    print(catid)
    return HttpResponse(f"<h1> Статьи по категориям </h1> <p>{catid}</p>")


обработка исключений запроса к серверу

несуществующая страница 
код 404

процесс отладки settings.py  -> DEBUG = True
при
DEBUG = False
# разрешенные хосты
ALLOWED_HOSTS = ['127.0.0.1']

переопределение
not found 404

coolsite\urls.py 

# переменная handler404
handler404 = pageNotFound  # функция обработчик
# handler500  # ошибка сервера
# handler403  # доступ запрещен
# handler400  # невозможно отобразить запрос
работают только когда DEBUG = False
https://djbook.ru/rel3.0/topics/http/views.html  # Создание представлений


views.py

def pageNotFound(request, exception):
    return HttpResponseNotFound('<h1>Страница не найдена</h1>')

raise Http404()  # генерация исключения 404 страница не найдена


редиректы 301 302
перенаправления
301 - страница перемещена на другой адрес постоянно
302 - страница перемещена на другой адрес временно

django.shortcuts.redirect

return redirect('home', permanent=False) 
path('', index, name='home'),  # # http://127.0.0.1/wom/  name='home' имя маршрута для ридиректа
